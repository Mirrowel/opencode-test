name: PR Review

on:
  pull_request_target:
    types: [opened]
  workflow_dispatch: # Allow manual runs
    inputs:
      prNumber:
        description: 'The number of the PR to review manually'
        required: true
        type: string

jobs:
  review-pr:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    env:
      # Universally define the PR number for both triggers
      PR_NUMBER: ${{ github.event.pull_request.number || inputs.prNumber }}

    steps:

      - name: Generate GitHub App Token
        id: generate_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.BOT_APP_ID }}
          private-key: ${{ secrets.BOT_PRIVATE_KEY }}

      # STEP 1: Fetch only the metadata needed for checkout.
      - name: Fetch PR Metadata and Context
        id: pr_meta
        env:
          GH_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |
          pr_json=$(gh pr view ${{ env.PR_NUMBER }} --repo ${{ github.repository }} --json headRefName,headRepository,title,body,headRefOid,comments,reviews,closingIssuesReferences)
          
          # Set outputs for the checkout step
          echo "repo_full_name=$(echo "$pr_json" | jq -r .headRepository.nameWithOwner)" >> $GITHUB_OUTPUT
          echo "ref_name=$(echo "$pr_json" | jq -r .headRefName)" >> $GITHUB_OUTPUT

          # Set environment variables for the prompt step
          echo "PR_TITLE=$(echo "$pr_json" | jq -r .title)" >> $GITHUB_ENV
          echo "PR_HEAD_SHA=$(echo "$pr_json" | jq -r .headRefOid)" >> $GITHUB_ENV
          {
            echo "PR_BODY<<EOF"
            echo "$pr_json" | jq -r .body
            echo "EOF"
          } >> "$GITHUB_ENV"
          
          # --- Linked Issues Context ---
          {
            echo "LINKED_ISSUES_CONTEXT<<EOF"
            if [ "$(echo "$pr_json" | jq '.closingIssuesReferences | length')" -gt 0 ]; then
              echo "$pr_json" | jq -r '.closingIssuesReferences[] | 
                "<issue>\n  <number>#\(.number)</number>\n  <title>\(.title)</title>\n  <body>\n\(.body)\n</body>\n</issue>\n"'
            else
              echo "No issues are formally linked for closure by this PR - but still can be referenced in it."
            fi
            echo "EOF"
          } >> "$GITHUB_ENV"
          
          # --- PR Comments and Reviews Context ---
          {
            echo "PR_CONTEXT<<EOF"
            
            # Format top-level comments
            if [ "$(echo "$pr_json" | jq '.comments | length')" -gt 0 ]; then
              echo "### General PR Comments"
              echo "$pr_json" | jq -r '.comments[] | "Author: @\(.author.login)\nDate: \(.createdAt)\n\n\(.body)\n\n---\n"'
            fi

            # Format formal reviews and their line-comments
            if [ "$(echo "$pr_json" | jq '.reviews | length')" -gt 0 ]; then
              echo "### Formal Code Reviews"
              echo "$pr_json" | jq -r '.reviews[] | 
                "Reviewer: @\(.author.login)\nState: \(.state)\nDate: \(.createdAt)\n\n\(.body)\n" + 
                (if .comments | length > 0 then "#### Line Comments in this Review:\n" + (.comments[] | "- **File:** \(.path) **Line:** \(.line)\n  - **Comment:** \(.body)\n") else "" end) +
                "\n---\n"'
            fi

            # Handle case where there is no context
            if [ "$(echo "$pr_json" | jq '.comments | length')" -eq 0 ] && [ "$(echo "$pr_json" | jq '.reviews | length')" -eq 0 ]; then
              echo "No comments or reviews have been submitted yet."
            fi
            echo "EOF"
          } >> "$GITHUB_ENV"

      # STEP 2: Use the fetched metadata to perform a safe checkout.
      - name: Checkout PR head
        uses: actions/checkout@v4
        with:
          repository: ${{ steps.pr_meta.outputs.repo_full_name }}
          ref: ${{ steps.pr_meta.outputs.ref_name }}
          fetch-depth: 0

      - name: Inject Custom Config (For Proxy Support)
        run: |
          mkdir -p ~/.config/opencode
          # Build and write opencode.json with secrets
          CONFIG='{
            "$schema": "https://opencode.ai/config.json",
            "provider": {
              "llm-proxy": {
                "npm": "@ai-sdk/openai-compatible",
                "name": "Proxy",
                "options": {
                  "baseURL": "${{ secrets.PROXY_BASE_URL }}",
                  "apiKey": "${{ secrets.PROXY_API_KEY }}",
                  "headers": {
                    "User-Agent": "OpenCode/1.0",
                    "X-Custom-Header": "your-value"
                  }
                },
                "models": {
                  "${{ secrets.OPENCODE_MODEL }}": {
                    "name": "Custom Model",
                    "limit": {
                      "context": 262000,
                      "output": 64192
                    }
                  }
                }
              }
            },
            "autoupdate": true
          }'
          echo "$CONFIG" > ~/.config/opencode/opencode.json

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-3.12-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-3.12

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Install opencode
        run: curl -fsSL https://opencode.ai/install | bash

        # FIX: Create the directory that opencode expects
      - name: Ensure opencode directory exists
        run: mkdir -p /home/runner/.local/share/opencode/project


      - name: Review PR comprehensively
        env:
          OPENCODE_API_KEY: ${{ secrets.PROXY_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENCODE_PERMISSION: |
            {
              "bash": {
                "gh*": "allow",
                "git*": "allow"
              },
              "webfetch": "deny"
            }
        run: |
          # Use a heredoc (<<'EOF') to pass the prompt safely via stdin.
          # The "-" tells the opencode command to read the prompt from stdin.
          opencode run --share -m llm-proxy/${{ secrets.OPENCODE_MODEL }} - <<'EOF'
          You are a meticulous and collaborative code reviewer. Your primary objective is to help improve the code quality by providing constructive and actionable feedback.

          A new pull request has been submitted: '${{ env.PR_TITLE }}'

          <pr-number>
          ${{ env.PR_NUMBER }}
          </pr-number>

          <pr-description>
          ${{ env.PR_BODY }}
          </pr-description>

          <linked-issues-for-closure>
          This PR is intended to close the following issues. They provide the critical context for your review.
          ${{ env.LINKED_ISSUES_CONTEXT }}
          </linked-issues-for-closure>

          <existing-reviews-and-comments>
          ${{ env.PR_CONTEXT }}
          </existing-reviews-and-comments>

          Before diving into a line-by-line review, first consider the "big picture". Does this PR's overall approach make sense? Does it fit within the existing architecture? Is there a simpler way to achieve the same goal? Address these high-level points in your summary comment.
          Frame your feedback constructively. Instead of "This is wrong," prefer "Have you considered this alternative approach because...?" If you are unsure about the author's intent, ask clarifying questions.

          Conduct a comprehensive review of this pull request by performing the following tasks:
          1.  **Analyze the Changes:** Fetch the pull request branch and carefully inspect all code modifications in their full context.
          2.  **Verify the Implementation:** Ensure that the implementation correctly addresses the goals stated in the PR description and any linked issues.
          3.  **Assess Code Quality:** Evaluate the code against these criteria:
              - **Clarity & Readability:** Is the code easy to understand? Are variable names clear?
            - **Security:** Are there any potential vulnerabilities (e.g., injection, improper error handling, dependency issues)?
            - **Performance:** Could any of this code introduce performance bottlenecks?
            - **Testing:** Are there sufficient tests for the new logic? If it's a bug fix, is there a regression test?
            - **Documentation:** Are comments, docstrings, and external docs (`README.md`, etc.) updated accordingly?
            - **Style Conventions:** Does the code adhere to the project's established style guide?
          4.  **Check for Completeness:** Verify that all related tasks are resolved, documentation is updated, and there are no regressions.

          For specific feedback, post comments on the exact lines of code using the `gh api` command. Provide clear explanations and use suggestion blocks for code improvements where applicable. Here is the command template:
          \\\
          gh api \
            --method POST \
            -H \"Accept: application/vnd.github+json\" \
            -H \"X-GitHub-Api-Version: 2022-11-28\" \
            /repos/${{ github.repository }}/pulls/${{ env.PR_NUMBER }}/comments \
            -f 'body=[Your insightful comment and suggestion]' -f 'commit_id=${{ env.PR_HEAD_SHA }}' -f 'path=[path-to-file]' -F \"line=[line]\" -f 'side=RIGHT'
          \\\

          After posting all line-specific comments, leave a single summary comment on the PR using `gh pr comment`. This summary should follow this structure:

          **Overall Assessment:** A brief, high-level summary of the pull request. (e.g., 'This PR looks solid and addresses the issue well, with a few minor suggestions for improvement.')
          **Architectural Feedback (if any):** High-level comments on the overall approach.
          **Key Suggestions:** A bulleted list of the most important feedback points that should be addressed.
          **Nitpicks and Minor Points:** A separate section for smaller, optional suggestions (e.g., code style, typos).
          **Questions for the Author:** A list of clarifying questions to start a discussion.

          If the PR is excellent and requires no changes, provide a positive and encouraging summary. Make it clear that your comments are suggestions for the author to consider.
          EOF
