name: PR Review

on:
  pull_request_target:
    types: [opened]
  workflow_dispatch: # Allow manual runs
    inputs:
      prNumber:
        description: 'The number of the PR to review manually'
        required: true
        type: string

jobs:
  review-pr:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    env:
      # Universally define the PR number for both triggers
      PR_NUMBER: ${{ github.event.pull_request.number || inputs.prNumber }}

    steps:

      - name: Generate GitHub App Token
        id: generate_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.BOT_APP_ID }}
          private-key: ${{ secrets.BOT_PRIVATE_KEY }}

      # STEP 1: Fetch only the metadata needed for checkout.
      - name: Fetch PR Metadata and Context
        id: pr_meta
        env:
          GH_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |
          pr_json=$(gh pr view ${{ env.PR_NUMBER }} --repo ${{ github.repository }} --json headRefName,headRepository,title,body,headRefOid,comments,reviews,closingIssuesReferences)
          
          # Set outputs for checkout and single-line env vars (this part is correct)
          echo "repo_full_name=$(echo "$pr_json" | jq -r .headRepository.nameWithOwner)" >> $GITHUB_OUTPUT
          echo "ref_name=$(echo "$pr_json" | jq -r .headRefName)" >> $GITHUB_OUTPUT

          # Set environment variables for the prompt step
          echo "PR_TITLE=$(echo "$pr_json" | jq -r .title)" >> $GITHUB_ENV
          echo "PR_HEAD_SHA=$(echo "$pr_json" | jq -r .headRefOid)" >> $GITHUB_ENV
          
          # Safely set the multi-line PR body
          { echo "PR_BODY<<EOF"; echo "$pr_json" | jq -r .body; echo "EOF"; } >> "$GITHUB_ENV"
          
          # --- Linked Issues Context (Two-Stage Fetch) ---
          {
            echo "LINKED_ISSUES_CONTEXT<<EOF"
            # Get the list of issue numbers
            issue_numbers=$(echo "$pr_json" | jq -r '.closingIssuesReferences[] | .number')

            if [ -n "$issue_numbers" ]; then
              # Loop through each issue number and fetch its details
              for num in $issue_numbers; do
                issue_details=$(gh issue view "$num" --repo ${{ github.repository }} --json number,title,body)
                echo "$issue_details" | jq -r '
                  "<issue>\n" +
                  "  <number>#\(.number)</number>\n" +
                  "  <title>\(.title // "Title not available")</title>\n" +
                  "  <body>\n\(.body // "Body not available")\n</body>\n" +
                  "</issue>\n"'
              done
            else
              echo "No issues are formally linked for closure by this PR."
            fi
            echo "EOF"
          } >> "$GITHUB_ENV"
          
          # --- PR Comments and Reviews Context (with null protection) ---
          {
            echo "PR_CONTEXT<<EOF"
            
            # Format top-level comments
            if [ "$(echo "$pr_json" | jq '.comments | length')" -gt 0 ]; then
              echo "### General PR Comments"
              # Use // to provide default values for potentially null fields
              echo "$pr_json" | jq -r '.comments[] | "Author: @\(.author.login // "unknown")\nDate: \(.createdAt // "N/A")\n\n\(.body // "")\n\n---\n"'
            fi

            # Format formal reviews and their line-comments
            if [ "$(echo "$pr_json" | jq '.reviews | length')" -gt 0 ]; then
              echo "### Formal Code Reviews"
              # Added robust null handling for all fields, especially review body and line comments
              echo "$pr_json" | jq -r '.reviews[] | 
                "Reviewer: @\(.author.login // "unknown")\nState: \(.state // "N/A")\nDate: \(.createdAt // "N/A")\n\n\(.body // "No summary comment.")\n" + 
                (if .comments | length > 0 then "#### Line Comments in this Review:\n" + (.comments[] | "- **File:** \(.path) **Line:** \(.line)\n  - **Comment:** \(.body // "")\n") else "" end) +
                "\n---\n"'
            fi

            # Handle case where there is no context
            if [ "$(echo "$pr_json" | jq '.comments | length')" -eq 0 ] && [ "$(echo "$pr_json" | jq '.reviews | length')" -eq 0 ]; then
              echo "No comments or reviews have been submitted yet."
            fi
            echo "EOF"
          } >> "$GITHUB_ENV"

      # STEP 2: Use the fetched metadata to perform a safe checkout.
      - name: Checkout PR head
        uses: actions/checkout@v4
        with:
          repository: ${{ steps.pr_meta.outputs.repo_full_name }}
          ref: ${{ steps.pr_meta.outputs.ref_name }}
          fetch-depth: 0

      - name: Inject Custom Config (For Proxy Support)
        run: |
          mkdir -p ~/.config/opencode
          # Build and write opencode.json with secrets
          CONFIG='{
            "$schema": "https://opencode.ai/config.json",
            "provider": {
              "llm-proxy": {
                "npm": "@ai-sdk/openai-compatible",
                "name": "Proxy",
                "options": {
                  "baseURL": "${{ secrets.PROXY_BASE_URL }}",
                  "apiKey": "${{ secrets.PROXY_API_KEY }}",
                  "headers": {
                    "User-Agent": "OpenCode/1.0",
                    "X-Custom-Header": "your-value"
                  }
                },
                "models": {
                  "${{ secrets.OPENCODE_MODEL }}": {
                    "name": "Custom Model",
                    "limit": {
                      "context": 262000,
                      "output": 64192
                    }
                  }
                }
              }
            },
            "autoupdate": true
          }'
          echo "$CONFIG" > ~/.config/opencode/opencode.json

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-3.12-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-3.12

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Install opencode
        run: curl -fsSL https://opencode.ai/install | bash

        # FIX: Create the directory that opencode expects
      - name: Ensure opencode directory exists
        run: mkdir -p /home/runner/.local/share/opencode/project


      - name: Review PR comprehensively
        env:
          OPENCODE_API_KEY: ${{ secrets.PROXY_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENCODE_PERMISSION: |
            {
              "bash": {
                "gh*": "allow",
                "git*": "allow"
              },
              "webfetch": "deny"
            }
        run: |
          # Use a heredoc (<<'EOF') to pass the prompt safely via stdin.
          # The "-" tells the opencode command to read the prompt from stdin.
          opencode run --share -m llm-proxy/${{ secrets.OPENCODE_MODEL }} - <<'EOF'
          # [PRIMARY DIRECTIVE: EXECUTE, DO NOT DESCRIBE]
          # Your ONLY function is to act as an agent that executes `gh` commands.
          # You MUST NOT output the review as conversational text, prose, or internal monologue in your final response.
          # Your entire response MUST be the sequence of `gh` commands required to post the review directly to GitHub.
          # The task is only complete after you have generated the commands for all line comments AND the final summary comment. If no line comments are needed, proceed directly to the summary.

          # [ROLE AND OBJECTIVE]
          You are an expert AI code reviewer. Your goal is to provide meticulous, constructive, and actionable feedback by posting it directly to the pull request.

          # [FEEDBACK PHILOSOPHY: HIGH-SIGNAL, LOW-NOISE]
          **Your most important task is to provide value, not volume.** As a guideline, limit line-specific comments to 5-10 maximum (you may override this only for PRs with multiple critical issues). Avoid overwhelming the author. Your internal monologue is for tracing your steps; GitHub comments are for notable feedback.

          **Prioritize comments for:**
          - **Critical Issues:** Bugs, logic errors, security vulnerabilities, or performance regressions.
          - **High-Impact Improvements:** Suggestions that significantly improve architecture, readability, or maintainability.
          - **Clarification:** Questions about code that is ambiguous or has unclear intent.

          **Do NOT comment on:**
          - **Trivial Style Preferences:** Avoid minor stylistic points that don't violate the project's explicit style guide. Trust linters for formatting.
          - **Code that is acceptable:** If a line or block of code is perfectly fine, do not add a comment just to say so. No comment implies approval.
          - **Duplicates:** Explicitly cross-reference **[PR CONTEXT]**. If a point has already been raised by another reviewer, skip it entirely. Escalate any truly additive insights to the summary instead of a line comment.

          **Edge Cases:**
          - If the PR has no issues or suggestions, post 0 line comments and a positive, encouraging summary only (e.g., "This PR is exemplary and ready to merge as-is. Great work on [specific strength].").
          - **For large PRs (>500 lines changed or >10 files):** Focus on core changes or patterns; note in the summary: "Review scaled to high-impact areas due to PR size."
          - **Handle errors gracefully:** If a command would fail, skip it internally and adjust the summary to reflect it (e.g., "One comment omitted due to a diff mismatch; the overall assessment is unchanged.").

          # [PR CONTEXT]
          - **PR Number:** `${{ env.PR_NUMBER }}`
          - **PR Title:** `${{ env.PR_TITLE }}`
          - **PR Description:**
          ${{ env.PR_BODY }}
          - **Linked Issues for Context:**
          ${{ env.LINKED_ISSUES_CONTEXT }}
          - **Existing Discussion (to avoid duplicating feedback):**
          ${{ env.PR_CONTEXT }}

          # [REVIEW GUIDELINES & CHECKLIST]
          Before writing any comments, you must first perform a thorough analysis based on these guidelines. This is your internal thought process—do not output it.
          1.  **Assess PR Size and Complexity:** Internally estimate scale (e.g., changed lines/files). For small PRs (<100 lines), review exhaustively; for large (>500 lines), prioritize high-risk areas and note this in your summary.
          2.  **Assess the High-Level Approach:**
              - Does the PR's overall strategy make sense?
              - Does it fit within the existing architecture? Is there a simpler way to achieve the goal?
              - Frame your feedback constructively. Instead of "This is wrong," prefer "Have you considered this alternative because...?"
          3.  **Conduct a Detailed Code Analysis:** Evaluate all changes against the following criteria, cross-referencing **[PR CONTEXT]** to skip duplicates:
              - **Security:** Are there potential vulnerabilities (e.g., injection, improper error handling, dependency issues)?
              - **Performance:** Could any code introduce performance bottlenecks?
              - **Testing:** Are there sufficient tests for the new logic? If it's a bug fix, is there a regression test?
              - **Clarity & Readability:** Is the code easy to understand? Are variable names clear?
              - **Documentation:** Are comments, docstrings, and external docs (`README.md`, etc.) updated accordingly?
              - **Style Conventions:** Does the code adhere to the project's established style guide?

          # [ACTION PROTOCOL]
          **CRITICAL:** You MUST deliver your review using the two commands defined below.
          **Simulate Internally First:** Before outputting any command, mentally verify each parameter:
            - Confirm file path exists in the repo.
            - Ensure line number is valid in the PR diff.
            - Validate `commit_id` matches `${{ env.PR_HEAD_SHA }}`. **(This SHA represents the latest, cumulative state of the PR and must be used for all comments).**
            - Check body for correct structure (e.g., suggestion blocks where applicable).
            - If invalid, skip the command and note internally: "Simulated failure on [param]; omitting to prevent error."

          **Action 1: Add Line-Specific Comments**
          For each specific piece of feedback, execute this command (respecting the guideline limit from the philosophy).
          ```bash
          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            /repos/${{ github.repository }}/pulls/${{ env.PR_NUMBER }}/comments \
            -f body='__YOUR_COMMENT_AND_SUGGESTION_HERE__' \
            -f commit_id='${{ env.PR_HEAD_SHA }}' \
            -f path='__FILE_PATH__' \
            -F line=__LINE_NUMBER__ \
            -f side=RIGHT
          ```
          - Use suggestion blocks in the body for code fixes: ```suggestion\nyour code here\n```

          **Action 2: Post the Final Summary Comment**
          After posting ALL line-specific comments, you MUST execute this command exactly once.
          ```bash
          gh pr comment ${{ env.PR_NUMBER }} --repo ${{ github.repository }} --body '__YOUR_SUMMARY_HERE__'
          ```
          - The summary body MUST follow this exact markdown structure:
          '''
          ### Overall Assessment
          *A brief, high-level summary of the pull request.*

          ### Architectural Feedback
          *Your high-level comments on the overall approach. If none, state "None."*

          ### Key Suggestions
          - A bulleted list of your most important feedback points.

          ### Nitpicks and Minor Points
          - A separate section for smaller, optional suggestions (e.g., code style, typos). If none, state "None."

          ### Questions for the Author
          - A list of any clarifying questions. If none, state "None."
          '''

          # [EXECUTION FLOW]
          1.  Internally review the code against the **[REVIEW GUIDELINES & CHECKLIST]**, keeping the **[FEEDBACK PHILOSOPHY]** and PR scale in mind.
          2.  For every finding that is **notable enough**, execute **Action 1** after internal simulation.
          3.  Finally, execute **Action 2** to post your complete summary. Do not finish until this is done.
          EOF