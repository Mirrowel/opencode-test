name: Issue Comment

on:
  issues:
    types: [opened]

jobs:
  check-issue:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Inject Custom Config (For Proxy Support)
        run: |
          mkdir -p ~/.config/opencode
          # Build and write opencode.json with secrets
          CONFIG='{
            "$schema": "https://opencode.ai/config.json",
            "provider": {
              "llm-proxy": {
                "npm": "@ai-sdk/openai-compatible",
                "name": "Proxy",
                "options": {
                  "baseURL": "${{ secrets.PROXY_BASE_URL }}",
                  "apiKey": "${{ secrets.PROXY_API_KEY }}",
                  "headers": {
                    "User-Agent": "OpenCode/1.0",
                    "X-Custom-Header": "your-value"
                  }
                },
                "models": {
                  "${{ secrets.OPENCODE_MODEL }}": {
                    "name": "Custom Model"
                  }
                }
              }
            },
            "autoupdate": true
          }'
          echo "$CONFIG" > ~/.config/opencode/opencode.json

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-3.12-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-3.12

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Install opencode
        run: curl -fsSL https://opencode.ai/install | bash
      
      # FIX: Create the directory that opencode expects
      - name: Ensure opencode directory exists
        run: mkdir -p /home/runner/.local/share/opencode/project

      - name: Analyze issue and suggest resolution
        env:
          OPENCODE_API_KEY: ${{ secrets.PROXY_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENCODE_PERMISSION: |
            {
              "bash": {
                "gh*": "allow",
                "git*": "allow"
              },
              "webfetch": "deny"
            }
        run: |
          opencode run --share -m llm-proxy/${{ secrets.OPENCODE_MODEL }} "You are an expert software engineer specializing in bug detection and resolution. Your goal is to provide a comprehensive initial analysis of this new issue to help the maintainers.

          A new issue has been created: '${{ github.event.issue.title }}'

          <issue-number>
          ${{ github.event.issue.number }}
          </issue-number>

          <issue-description>
          ${{ github.event.issue.body }}
          </issue-description>

          Investigate this issue thoroughly by following these steps:
          1.  **Understand the Problem:** Scrutinize the issue title and description to fully grasp the reported problem.
          2.  **Explore the Codebase:** Navigate the repository to find the most relevant files, configurations, or recent commits related to the issue. Utilize `git` and `gh` commands for this exploration.
          3.  **Identify the Root Cause:** Based on your code exploration, determine the most likely root cause of the issue.
          4.  **Validate the Issue:** Assess if the issue is valid, a duplicate, or if it requires more information from the user.
          5.  **Propose a Solution:** Outline a clear and actionable plan for remediation. This should include specific files to modify and the proposed changes.

          After your investigation, summarize your findings in a single, well-formatted comment on the issue using `gh issue comment`. The comment should have the following structure:

          **Summary:** A one-sentence overview of your findings.
          **Issue Validation:** State whether the issue is `Confirmed`, `Partially Confirmed`, `Needs More Info`, or a `Duplicate`.
          **Root Cause Analysis:** Explain the suspected root cause with supporting evidence (e.g., file paths, function names).
          **Proposed Next Steps:** Provide concrete steps or code snippets for the maintainers to resolve the issue.
          **Missing Information (if any):** If the issue cannot be fully validated, clearly state what information is needed from the issue filer.

          At the end of your comment, add the following note: '_This analysis was generated by an AI assistant._'"