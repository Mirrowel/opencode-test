name: Issue Comment

on:
  issues:
    types: [opened]
  
    # Manual trigger
  workflow_dispatch:
    inputs:
      issueNumber:
        description: 'The number of the issue to analyze manually'
        required: true
        type: string

jobs:
  check-issue:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write

    # Define an environment variable that works for both triggers
    env:
      # If triggered by 'issues', it uses github.event.issue.number.
      # If triggered by 'workflow_dispatch', it uses the number you provided in the form.
      ISSUE_NUMBER: ${{ github.event.issue.number || inputs.issueNumber }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Inject Custom Config (For Proxy Support)
        run: |
          mkdir -p ~/.config/opencode
          # Build and write opencode.json with secrets
          CONFIG='{
            "$schema": "https://opencode.ai/config.json",
            "provider": {
              "llm-proxy": {
                "npm": "@ai-sdk/openai-compatible",
                "name": "Proxy",
                "options": {
                  "baseURL": "${{ secrets.PROXY_BASE_URL }}",
                  "apiKey": "${{ secrets.PROXY_API_KEY }}",
                  "headers": {
                    "User-Agent": "OpenCode/1.0",
                    "X-Custom-Header": "your-value"
                  }
                },
                "models": {
                  "${{ secrets.OPENCODE_MODEL }}": {
                    "name": "Custom Model",
                    "limit": {
                      "context": 262000,
                      "output": 64192
                    }
                  }
                }
              }
            },
            "autoupdate": true
          }'
          echo "$CONFIG" > ~/.config/opencode/opencode.json

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-3.12-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-3.12

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Generate GitHub App Token
        id: generate_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.BOT_APP_ID }}
          private-key: ${{ secrets.BOT_PRIVATE_KEY }}

      - name: Configure Git for Bot
        env:
          GH_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |
          git config --global user.name "mirrobot-agent[bot]"
          git config --global user.email "${{ secrets.BOT_APP_ID }}+mirrobot-agent@users.noreply.github.com"
          git config --global url."https://x-access-token:${GH_TOKEN}@github.com/".insteadOf "https://github.com/"

      - name: Install opencode
        run: curl -fsSL https://opencode.ai/install | bash
      
      # FIX: Create the directory that opencode expects
      - name: Ensure opencode directory exists
        run: mkdir -p /home/runner/.local/share/opencode/project

      # NEW STEP: Fetch issue details so they are available for both triggers
      - name: Fetch Issue Details
        id: issue_details # Giving the step an ID can be useful
        env:
          GH_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |
          # Fetch the full JSON data
          issue_data=$(gh issue view ${{ env.ISSUE_NUMBER }} --json title,body,comments)
          
          # Extract title (usually single-line, but this is safer)
          issue_title=$(echo "$issue_data" | jq -r .title)
          echo "ISSUE_TITLE=$issue_title" >> $GITHUB_ENV

          # Extract body and use the multi-line heredoc syntax for GITHUB_ENV
          issue_body=$(echo "$issue_data" | jq -r .body)
          echo "ISSUE_BODY<<EOF" >> $GITHUB_ENV
          echo "$issue_body" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          # Set ISSUE_COMMENTS by formatting them cleanly
          echo "ISSUE_COMMENTS<<EOF" >> $GITHUB_ENV
          if [ "$(echo "$issue_data" | jq '.comments | length')" -gt 0 ]; then
            echo "$(echo "$issue_data" | jq -r '.comments[] | "Author: @\(.author.login)\nDate: \(.createdAt)\n\n\(.body)\n\n---\n"')" >> $GITHUB_ENV
          else
            echo "No comments have been posted yet." >> $GITHUB_ENV
          fi
          echo "EOF" >> $GITHUB_ENV

      - name: Analyze issue and suggest resolution
        env:
          OPENCODE_API_KEY: ${{ secrets.PROXY_API_KEY }}
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
          OPENCODE_PERMISSION: |
            {
              "bash": {
                "gh*": "allow",
                "git*": "allow"
              },
              "webfetch": "deny"
            }
        run: |
          # Use a heredoc (<<'EOF') to pass the prompt safely via stdin.
          # The "-" tells the opencode command to read the prompt from stdin.
          opencode run --share -m llm-proxy/${{ secrets.OPENCODE_MODEL }} - <<'EOF'
          You are an expert software engineer specializing in bug detection and resolution. Your goal is to provide a comprehensive initial analysis of this new issue to help the maintainers.

          A new issue has been created: '${{ env.ISSUE_TITLE }}'

          <issue-number>
          ${{ env.ISSUE_NUMBER }}
          </issue-number>

          <issue-description>
          ${{ env.ISSUE_BODY }}
          </issue-description>

          <existing-comments>
          ${{ env.ISSUE_COMMENTS }}
          </existing-comments>

          Investigate this issue thoroughly by following these steps:
            1. **Search for Duplicates:** Lookup this issue and search through existing issues (excluding #${{ env.ISSUE_NUMBER }}) in this repository to find any potential duplicates of this new issue.
            Consider:
            - Similar titles or descriptions
            - Same error messages or symptoms
            - Related functionality or components
            - Similar feature requests

            If you find any potential duplicates, comment on the new issue with:
            - A brief explanation of why it might be a duplicate
            - Links to the potentially duplicate issues
            - A suggestion to check those issues first

            Use this format for the comment:
            'This issue might be a duplicate of existing issues. Please check:
            - #[issue_number]: [brief description of similarity]

            If duplicates are found, stop further analysis.
          2.  **Understand the Problem:** Scrutinize the issue title and description to fully grasp the reported problem. Identify the specific branch(es), files, or commit(s) mentioned.
          3.  **Explore the Codebase:** Navigate the repository to find the most relevant files, configurations, or recent commits related to the issue. Utilize `git` and `gh` commands for this exploration. Navigate the repository to find the most relevant files. Use `git log --grep="<keyword>"` to find related commits, `git grep "<error_message>"` to search the codebase for error strings, and `git blame <file>` to inspect the history of suspicious files. Start by getting an overview of the project structure with `ls -R`.
          4.  **Identify the Root Cause:** Based on your code exploration, determine the most likely root cause of the issue.
          5.  **Validate the Issue:** Assess if the issue is valid and if the description provides enough information to reproduce the problem. If not, explicitly state what is missing (e.g., "A minimal reproducible code example is needed," "Please provide the exact command you ran," "What version of Node.js are you using?").
          6.  **Suggest Labels:** Based on your analysis, suggest appropriate labels for this issue. Choose from the following common labels: `bug`, `enhancement`, `documentation`, `question`, `help-wanted`, `good first issue`, `needs-reproduction`. Provide a brief justification for your choices.
          7.  **Propose a Solution:** Outline a clear and actionable plan for remediation. This should include specific files to modify and the proposed changes.

          After your investigation, summarize your findings in a single, well-formatted comment on the issue using `gh issue comment`. The comment should have the following structure:

          **Summary:** A one-sentence overview of your findings.
          **Issue Validation:** State whether the issue is `Confirmed`, `Partially Confirmed`, `Needs More Info`, or a `Duplicate`.
          **Reproducibility Assessment:** `Reproducible` | `Not Reproducible` | `Needs More Info`.
          **Root Cause Analysis:** Explain the suspected root cause with supporting evidence (e.g., file paths, function names).
          **Suggested Labels:** `bug`, `needs-reproduction` (Provide a short justification).
          **Proposed Next Steps:** Provide concrete steps or code snippets for the maintainers to resolve the issue.
          **Missing Information (if any):** If the issue cannot be fully validated, clearly state what information is needed from the issue filer.

          At the end of your comment, add the following note: '_This analysis was generated by an AI assistant._ '
          EOF